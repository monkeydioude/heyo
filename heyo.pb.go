// Code generated by protoc-gen-go. DO NOT EDIT.
// source: heyo.proto

package heyo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AckCode int32

const (
	AckCode_OK          AckCode = 0
	AckCode_NO_LISTENER AckCode = 1
)

var AckCode_name = map[int32]string{
	0: "OK",
	1: "NO_LISTENER",
}
var AckCode_value = map[string]int32{
	"OK":          0,
	"NO_LISTENER": 1,
}

func (x AckCode) String() string {
	return proto.EnumName(AckCode_name, int32(x))
}
func (AckCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_heyo_6d025808cbeaeb47, []int{0}
}

type Rumor struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Id                   string   `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rumor) Reset()         { *m = Rumor{} }
func (m *Rumor) String() string { return proto.CompactTextString(m) }
func (*Rumor) ProtoMessage()    {}
func (*Rumor) Descriptor() ([]byte, []int) {
	return fileDescriptor_heyo_6d025808cbeaeb47, []int{0}
}
func (m *Rumor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rumor.Unmarshal(m, b)
}
func (m *Rumor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rumor.Marshal(b, m, deterministic)
}
func (dst *Rumor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rumor.Merge(dst, src)
}
func (m *Rumor) XXX_Size() int {
	return xxx_messageInfo_Rumor.Size(m)
}
func (m *Rumor) XXX_DiscardUnknown() {
	xxx_messageInfo_Rumor.DiscardUnknown(m)
}

var xxx_messageInfo_Rumor proto.InternalMessageInfo

func (m *Rumor) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Rumor) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Rumor) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Listener struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Listener) Reset()         { *m = Listener{} }
func (m *Listener) String() string { return proto.CompactTextString(m) }
func (*Listener) ProtoMessage()    {}
func (*Listener) Descriptor() ([]byte, []int) {
	return fileDescriptor_heyo_6d025808cbeaeb47, []int{1}
}
func (m *Listener) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Listener.Unmarshal(m, b)
}
func (m *Listener) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Listener.Marshal(b, m, deterministic)
}
func (dst *Listener) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Listener.Merge(dst, src)
}
func (m *Listener) XXX_Size() int {
	return xxx_messageInfo_Listener.Size(m)
}
func (m *Listener) XXX_DiscardUnknown() {
	xxx_messageInfo_Listener.DiscardUnknown(m)
}

var xxx_messageInfo_Listener proto.InternalMessageInfo

func (m *Listener) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Listener) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Ack struct {
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Code                 AckCode  `protobuf:"varint,2,opt,name=code,enum=heyo.AckCode" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_heyo_6d025808cbeaeb47, []int{2}
}
func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (dst *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(dst, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Ack) GetCode() AckCode {
	if m != nil {
		return m.Code
	}
	return AckCode_OK
}

func init() {
	proto.RegisterType((*Rumor)(nil), "heyo.Rumor")
	proto.RegisterType((*Listener)(nil), "heyo.Listener")
	proto.RegisterType((*Ack)(nil), "heyo.Ack")
	proto.RegisterEnum("heyo.AckCode", AckCode_name, AckCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BrokerClient is the client API for Broker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrokerClient interface {
	Whisper(ctx context.Context, in *Rumor, opts ...grpc.CallOption) (*Ack, error)
	Listen(ctx context.Context, opts ...grpc.CallOption) (Broker_ListenClient, error)
}

type brokerClient struct {
	cc *grpc.ClientConn
}

func NewBrokerClient(cc *grpc.ClientConn) BrokerClient {
	return &brokerClient{cc}
}

func (c *brokerClient) Whisper(ctx context.Context, in *Rumor, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/heyo.Broker/Whisper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerClient) Listen(ctx context.Context, opts ...grpc.CallOption) (Broker_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Broker_serviceDesc.Streams[0], "/heyo.Broker/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerListenClient{stream}
	return x, nil
}

type Broker_ListenClient interface {
	Send(*Listener) error
	Recv() (*Rumor, error)
	grpc.ClientStream
}

type brokerListenClient struct {
	grpc.ClientStream
}

func (x *brokerListenClient) Send(m *Listener) error {
	return x.ClientStream.SendMsg(m)
}

func (x *brokerListenClient) Recv() (*Rumor, error) {
	m := new(Rumor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrokerServer is the server API for Broker service.
type BrokerServer interface {
	Whisper(context.Context, *Rumor) (*Ack, error)
	Listen(Broker_ListenServer) error
}

func RegisterBrokerServer(s *grpc.Server, srv BrokerServer) {
	s.RegisterService(&_Broker_serviceDesc, srv)
}

func _Broker_Whisper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Rumor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServer).Whisper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heyo.Broker/Whisper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServer).Whisper(ctx, req.(*Rumor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Broker_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BrokerServer).Listen(&brokerListenServer{stream})
}

type Broker_ListenServer interface {
	Send(*Rumor) error
	Recv() (*Listener, error)
	grpc.ServerStream
}

type brokerListenServer struct {
	grpc.ServerStream
}

func (x *brokerListenServer) Send(m *Rumor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *brokerListenServer) Recv() (*Listener, error) {
	m := new(Listener)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Broker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heyo.Broker",
	HandlerType: (*BrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Whisper",
			Handler:    _Broker_Whisper_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Listen",
			Handler:       _Broker_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "heyo.proto",
}

func init() { proto.RegisterFile("heyo.proto", fileDescriptor_heyo_6d025808cbeaeb47) }

var fileDescriptor_heyo_6d025808cbeaeb47 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0x48, 0xad, 0xcc,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x5c, 0xb9, 0x58, 0x83, 0x4a,
	0x73, 0xf3, 0x8b, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35,
	0x38, 0x83, 0xc0, 0x6c, 0x21, 0x09, 0x2e, 0xf6, 0xdc, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x09,
	0x26, 0xb0, 0x30, 0x8c, 0x2b, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x22, 0xc1, 0x0c, 0x16, 0x64, 0xca,
	0x4c, 0x51, 0xd2, 0xe3, 0xe2, 0xf0, 0xc9, 0x2c, 0x2e, 0x49, 0xcd, 0x4b, 0xc5, 0x6e, 0x12, 0x44,
	0x3d, 0x13, 0x5c, 0xbd, 0x13, 0x17, 0xb3, 0x63, 0x72, 0x36, 0xb2, 0x05, 0x8c, 0xa8, 0x16, 0x28,
	0x72, 0xb1, 0x24, 0xe7, 0xa7, 0x40, 0xec, 0xe5, 0x33, 0xe2, 0xd5, 0x03, 0x3b, 0xdc, 0x31, 0x39,
	0xdb, 0x39, 0x3f, 0x25, 0x35, 0x08, 0x2c, 0xa5, 0xa5, 0xc4, 0xc5, 0x0e, 0x15, 0x10, 0x62, 0xe3,
	0x62, 0xf2, 0xf7, 0x16, 0x60, 0x10, 0xe2, 0xe7, 0xe2, 0xf6, 0xf3, 0x8f, 0xf7, 0xf1, 0x0c, 0x0e,
	0x71, 0xf5, 0x73, 0x0d, 0x12, 0x60, 0x34, 0x8a, 0xe2, 0x62, 0x73, 0x2a, 0xca, 0xcf, 0x4e, 0x2d,
	0x12, 0x52, 0xe6, 0x62, 0x0f, 0xcf, 0xc8, 0x2c, 0x2e, 0x48, 0x2d, 0x12, 0xe2, 0x86, 0x98, 0x06,
	0xf6, 0xb7, 0x14, 0x27, 0xdc, 0x68, 0x25, 0x06, 0x21, 0x6d, 0x2e, 0x36, 0x88, 0x37, 0x84, 0xf8,
	0x20, 0xc2, 0x30, 0x4f, 0x49, 0x21, 0xeb, 0x51, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x4c, 0x62, 0x03,
	0x87, 0xa3, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x06, 0xcf, 0x39, 0x4e, 0x55, 0x01, 0x00, 0x00,
}
